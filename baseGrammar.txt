<PROGRAM>	<CLASSLIST>	&
<CLASSLIST>	<CLASSDECL> <CLASSLIST’>
<CLASSLIST’>	<CLASSDECL> <CLASSLIST’>	&
<CLASSDECL>	class ident <CLASSDECL’>
<CLASSDECL’>	extends ident <CLASSBODY>	<CLASSBODY>
<CLASSBODY>	{ <CLASSBODY’>
<CLASSBODY’>	<V> <CD> <MD> }	<CLASSLIST> <V> <CD> <MD> }
<V>	<VARDECL> ; <V>	&
<CD>	<CONSTRUCTDECL> <CD>	&
<MD>	<METHODDECL> <MD>	&
<VARDECL>	<ISI> ident <COL> <VAR>
<ISI>	int	string	ident
<COL>	[ ] <COL>	&
<VAR>	, ident <COL> <VAR>	&
<CONSTRUCTDECL>	constructor <METHODBODY>
<METHODDECL>	<ISI> <COL> ident <METHODBODY>
<METHODBODY>	( <PARAMLIST> ) <STATEMENT>
<PARAMLIST>	<ISI> <COL> <ISICOL>	&
<ISICOL>	, <ISI> ident <COL> <ISICOL>	&
<STATEMENT>	<VARDECL> ;	<ATRIBSTAT> ;	<PRINTSTAT> ;	<READSTAT> ;	<RETURNSTAT> ;	<IFSTAT> ;	<FORSTAT> ;	{ <STATLIST> }	break ;	;	<SUPERSTAT> ;
<ATRIBSTAT>	<LVALUE> = <ATRIBSTAT’>
<ATRIBSTAT’>	<EXPRESSION>	<ALOCEXPRESSION>
<PRINTSTAT>	print <EXPRESSION>
<READSTAT>	read <LVALUE>
<RETURNSTAT>	return <RETURNSTAT’>
<RETURNSTAT’>	<EXPRESSION>	&
<SUPERSTAT>	super ( <ARGLIST> )
<IFSTAT>	if ( <EXPRESSION> ) <STATEMENT> <IFSTAT’>
<IFSTAT’>	else <STATEMENT>	&
<FORSTAT>	for ( <FORSTAT’>
<FORSTAT’>	<ATRIBSTAT> ; <FORSTAT’’>	; <FORSTAT’’’>
<FORSTAT’’>	; <FORSTAT’’’’>	<EXPRESSION> ; <FORSTAT’’’’>
<FORSTAT’’’>	<EXPRESSION> ; <FORSTAT’’’’>	; <ATRIBSTAT> ) <STATEMENT>
<FORSTAT’’’’>	<ATRIBSTAT> ) <STATEMENT>	) <STATEMENT>
<STATLIST>	<STATEMENT> <STATLIST’>
<STATLIST’>	<STATLIST>	&
<LVALUE>	ident <LV>
<LV>	[ <EXPRESSION> ] <LV>	. ident <LV’>	&
<LV’>	( <ARGLIST> ) <LV>	<LV>
<ALOCEXPRESSION>	new <ALOCEXPRESSION’>
<ALOCEXPRESSION’>	ident <ALOCEXPRESSION’’>	int <EXPR>	string <EXPR>
<ALOCEXPRESSION’’>	( <ARGLIST> )	<EXPR>
<EXPR>	[ <EXPRESSION> ] <EXPR’>
<EXPR’>	[ <EXPRESSION> ]	&
<EXPRESSION>	<NUMEXPRESSION> <EXPRESSION’>
<EXPRESSION’>	< <NUMEXPRESSION>	> <NUMEXPRESSION>	<= <NUMEXPRESSION>	>= <NUMEXPRESSION>	== <NUMEXPRESSION>	!= <NUMEXPRESSION>	&
<NUMEXPRESSION>	<TERM> <TM>
<TM>	+ <TERM> <TM>	- <TERM> <TM>	&
<TERM>	<UNARYEXPR> <UE>
<UE>	* <UNARYEXPR> <UE>	/ <UNARYEXPR> <UE>	% <UNARYEXPR> <UE>	&
<UNARYEXPR>	+ <FACTOR>	- <FACTOR>	<FACTOR>
<FACTOR>	int-constant	string-constant	null	<LVALUE> ( <EXPRESSION> )
<ARGLIST>	<EXPRESSION> <EXP>	&
<EXP>	, <EXPRESSION> <EXP>	&
